(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),s=t(667),c=t.n(s),A=new URL(t(113),t.b),d=new URL(t(505),t.b),p=i()(o()),l=c()(A),u=c()(d);p.push([n.id,":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n    --error-message: #ff0000;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url("+l+");\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url("+u+");\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n \n.error {\n    text-transform: capitalize;\n    color: var(--error-message);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,gEAAgE;IAChE,mBAAmB;IACnB,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,4CAA2B;AAC/B;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,WAAW;;IAEX,yDAAiD;IACjD,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,kBAAkB;;IAElB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,QAAQ;AACZ;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;;IAE1B,uBAAuB;IACvB,kBAAkB;;IAElB,6BAA6B;IAC7B,YAAY;;IAEZ,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,yCAAyC;IACzC,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,iBAAiB;;IAEjB,mBAAmB;;IAEnB,kBAAkB;;IAElB,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,YAAY;;IAEZ,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,wCAAwC;;IAExC,kBAAkB;;IAElB,wBAAwB;;AAE5B;;AAEA;IACI,eAAe;IACf,kBAAkB;;IAElB,yBAAyB;IACzB,mBAAmB;IACnB,iBAAiB;;IAEjB,8BAA8B;AAClC;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,8BAA8B;;IAE9B,kBAAkB;IAClB,iBAAiB;IACjB;AACJ;;AAEA;IACI,aAAa;IACb,mBAAmB;;IAEnB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;;IAEtB,uBAAuB;IACvB,6BAA6B;;IAE7B,wCAAwC;IACxC,YAAY;IACZ,gCAAgC;;IAEhC,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;AAC/B",sourcesContent:[":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n    --error-message: #ff0000;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url(./fonts/hello.ttf);\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url(./images/ryan-unsplash.jpg);\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n \n.error {\n    text-transform: capitalize;\n    color: var(--error-message);\n}"],sourceRoot:""}]);const f=p},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],d=a[A]||0,p="".concat(A," ").concat(d);a[A]=d+1;var l=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},113:(n,e,t)=>{n.exports=t.p+"292bdf409c7b9c1c5683.ttf"},505:(n,e,t)=>{n.exports=t.p+"c5e56dfc6ad0fd25bd47.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),A=t(216),d=t.n(A),p=t(589),l=t.n(p),u=t(426),f={};f.styleTagTransform=l(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var m=t(505);t.p;const g=t.p+"a198f7858f2ba3c2bc7e.jpg",h=t.p+"0b4ddd124d720f4dfcd1.jpg",B=t.p+"c4b5987f6ef74603bd8b.jpg",x=t.p+"231c894a0979299fa7f8.jpg",b=t.p+"3b61be67b64e7928dc62.jpg",C=(document.querySelector("button").addEventListener("click",(()=>{v.getWeatherInfo()})),{getUserQuery:function(){return document.querySelector("input").value},insertData:function(){const n=document.querySelector(".info-container");n.querySelector(".grid-top p").textContent=this.description,n.querySelector(".grid-top h1").textContent=`${this.city}, ${this.country}`,n.querySelector(".temperature").textContent=this.temperature;const e=Array.from(document.querySelectorAll(".side-info"));e[0].textContent="Feels like: "+this.tempfeelslike+"°",e[1].textContent="Wind: "+this.windspeed+"km/h",e[2].textContent="Humidity: "+this.humidity+"%"},createErrorDiv:function(n){const e=document.createElement("div");e.classList.add("error","visible"),e.textContent=n,document.querySelector(".header").insertBefore(e,document.querySelector("button"))},deleteErrorDiv:function(){const n=document.querySelector(".error");n&&n.remove()},setBackground:function(){const n=document.querySelector("html");switch(!0){case 800===this.code:n.style.backgroundImage="url('"+m+"')";break;case 801===this.code||802===this.code:n.style.backgroundImage="url('"+x+"')";break;case 803===this.code||804===this.code:n.style.backgroundImage="url('"+b+"')";break;case this.code>=600&&this.code<=622:break;case this.code>=500&&this.code<=531:n.style.backgroundImage="url('"+h+"')";break;case this.code>=300&&this.code<=321:n.style.backgroundImage="url('"+g+"')";break;case this.code>=200&&this.code<=232:n.style.backgroundImage="url('"+B+"')"}}}),I=function(){const n={insertData:C.insertData,setBackground:C.setBackground};return{extractRelevantData:function(e){const t=Object.create(n);t.temperature=Number(e.main.temp).toFixed(0),t.tempfeelslike=Number(e.main.feels_like).toFixed(0),t.humidity=e.main.humidity,t.windspeed=Number(e.wind.speed).toFixed(1),t.description=e.weather[0].description.slice(0,1).toUpperCase()+e.weather[0].description.slice(1),t.code=e.weather[0].id,t.city=e.name;const r=new Intl.DisplayNames(["en"],{type:"region"});return t.country=r.of(e.sys.country),console.log(t),t},fetchApiData:async function(n){try{const e=`https://api.openweathermap.org/data/2.5/weather?q=${n}&APPID=481dab978a20a42998a631eff7d4f8f4&units=metric`,t=await fetch(e,{mode:"cors"}),r=await t.json();if("404"===r.cod)throw r;return r}catch(n){return{isError:!0,message:n.message}}}}}(),v={getWeatherInfo:async function(){C.deleteErrorDiv();try{const n=C.getUserQuery(),e=await I.fetchApiData(n);if(e.isError)throw new Error(e.message);let t=I.extractRelevantData(e);t.insertData(),t.setBackground()}catch(n){return void C.createErrorDiv(n.message)}}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUErQkcsQ0FBRUMsZUF6QlBvRCxpQkFFQXZELEVBQVkwQixpQkFFWixJQUVFLE1BQU13QyxFQUFZbEUsRUFBWUksZUFFeEIrRCxRQUFnQnBDLEVBQXNCdUIsYUFBYVksR0FHekQsR0FBSUMsRUFBUUYsUUFBUyxNQUFNLElBQUl6SCxNQUFNMkgsRUFBUTlDLFNBRzdDLElBQUkrQyxFQUFpQnJDLEVBQXNCRSxvQkFBb0JrQyxHQUUvREMsRUFBZTlELGFBRWY4RCxFQUFlekMsZUFJakIsQ0FIRSxNQUFPcUMsR0FFUCxZQURBaEUsRUFBWW9CLGVBQWU0QyxFQUFNM0MsUUFFbkMsQ0FDRixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9mb250cy9oZWxsby50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIuL2ltYWdlcy9yeWFuLXVuc3BsYXNoLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAgIC0tZm9udC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgLS1mb250LXN0YWNrOiAnb3N3YWxkJywgR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgLS10ZW1wLW1hcmdpbjogMjBweDtcXG4gICAgLS1idXR0b24taGlnaGxpZ2h0OiAjNTRhMDk3O1xcbiAgICAtLWVycm9yLW1lc3NhZ2U6ICNmZjAwMDA7XFxufVxcbiBcXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdPc3dhbGQnO1xcbiAgICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxufVxcbiBcXG4qIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG4gXFxuaHRtbCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuIFxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbn1cXG4gXFxuLmhlYWRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICAgIFxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICAgIGdhcDogOHB4O1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiA1cHggMTZweDtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuIFxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiBcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gXFxuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idXR0b24taGlnaGxpZ2h0KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYnV0dG9uLWhpZ2hsaWdodCk7XFxufVxcbiBcXG4uaGVhZGVyIHAge1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuIFxcbiAgICBsZXR0ZXItc3BhY2luZzogNXB4O1xcbiAgICBcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjaylcXG59XFxuIFxcbi5oZWFkZXIgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gICAgaGVpZ2h0OiAyNXB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuIFxcbiAgICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuIFxcbi5pbmZvLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7IFxcbiAgICBncmlkLXRlbXBsYXRlOiAxZnIgMWZyIC8gbWluLWNvbnRlbnQgMWZyO1xcbiBcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBcXG59XFxuIFxcbi5ncmlkLXRvcCB7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAzO1xcbiBcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDRweDtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuIFxcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxufVxcbiBcXG4uZ3JpZC10b3AgcCB7XFxuICAgIGZvbnQtc2l6ZTogMS4zNXJlbVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlIHtcXG4gICAgZm9udC1zaXplOiA3cmVtO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxuIFxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IC0yNXB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLXRlbXAtbWFyZ2luKVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICfCsEMnO1xcbiAgICBmb250LXNpemU6IHh4LWxhcmdlO1xcbiBcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3R0b206IDgwcHg7XFxufVxcbiBcXG5wLnRlbXBlcmF0dXJlICsgZGl2IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gXFxuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgdmFyKC0tZm9udC1jb2xvcik7XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS10ZW1wLW1hcmdpbik7XFxuIFxcbiAgICBoZWlnaHQ6IDcwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG4gXFxuLnNpZGUtaW5mbyB7XFxuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xcbn1cXG4gXFxuLmVycm9yIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuICAgIGNvbG9yOiB2YXIoLS1lcnJvci1tZXNzYWdlKTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHdCQUF3QjtJQUN4QixnRUFBZ0U7SUFDaEUsbUJBQW1CO0lBQ25CLDJCQUEyQjtJQUMzQix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsNENBQTJCO0FBQy9COztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVzs7SUFFWCx5REFBaUQ7SUFDakQsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjs7SUFFbEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsUUFBUTtBQUNaOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLDBCQUEwQjs7SUFFMUIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjs7SUFFbEIsNkJBQTZCO0lBQzdCLFlBQVk7O0lBRVosd0JBQXdCO0lBQ3hCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx5Q0FBeUM7SUFDekMseUNBQXlDO0FBQzdDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixpQkFBaUI7O0lBRWpCLG1CQUFtQjs7SUFFbkIsa0JBQWtCOztJQUVsQix3QkFBd0I7SUFDeEI7QUFDSjs7QUFFQTtJQUNJLFlBQVk7SUFDWixZQUFZOztJQUVaLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHdDQUF3Qzs7SUFFeEMsa0JBQWtCOztJQUVsQix3QkFBd0I7O0FBRTVCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjs7SUFFbEIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixpQkFBaUI7O0lBRWpCLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJO0FBQ0o7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsOEJBQThCOztJQUU5QixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCO0FBQ0o7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1COztJQUVuQixrQkFBa0I7SUFDbEIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7O0lBRXRCLHVCQUF1QjtJQUN2Qiw2QkFBNkI7O0lBRTdCLHdDQUF3QztJQUN4QyxZQUFZO0lBQ1osZ0NBQWdDOztJQUVoQyxXQUFXO0lBQ1gsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLDJCQUEyQjtBQUMvQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAgIC0tZm9udC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgLS1mb250LXN0YWNrOiAnb3N3YWxkJywgR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgLS10ZW1wLW1hcmdpbjogMjBweDtcXG4gICAgLS1idXR0b24taGlnaGxpZ2h0OiAjNTRhMDk3O1xcbiAgICAtLWVycm9yLW1lc3NhZ2U6ICNmZjAwMDA7XFxufVxcbiBcXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdPc3dhbGQnO1xcbiAgICBzcmM6IHVybCguL2ZvbnRzL2hlbGxvLnR0Zik7XFxufVxcbiBcXG4qIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG4gXFxuaHRtbCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuIFxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi9pbWFnZXMvcnlhbi11bnNwbGFzaC5qcGcpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbn1cXG4gXFxuLmhlYWRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICAgIFxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICAgIGdhcDogOHB4O1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiA1cHggMTZweDtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuIFxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiBcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gXFxuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idXR0b24taGlnaGxpZ2h0KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYnV0dG9uLWhpZ2hsaWdodCk7XFxufVxcbiBcXG4uaGVhZGVyIHAge1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuIFxcbiAgICBsZXR0ZXItc3BhY2luZzogNXB4O1xcbiAgICBcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjaylcXG59XFxuIFxcbi5oZWFkZXIgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gICAgaGVpZ2h0OiAyNXB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuIFxcbiAgICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuIFxcbi5pbmZvLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7IFxcbiAgICBncmlkLXRlbXBsYXRlOiAxZnIgMWZyIC8gbWluLWNvbnRlbnQgMWZyO1xcbiBcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBcXG59XFxuIFxcbi5ncmlkLXRvcCB7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAzO1xcbiBcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDRweDtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuIFxcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxufVxcbiBcXG4uZ3JpZC10b3AgcCB7XFxuICAgIGZvbnQtc2l6ZTogMS4zNXJlbVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlIHtcXG4gICAgZm9udC1zaXplOiA3cmVtO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxuIFxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IC0yNXB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLXRlbXAtbWFyZ2luKVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICfCsEMnO1xcbiAgICBmb250LXNpemU6IHh4LWxhcmdlO1xcbiBcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3R0b206IDgwcHg7XFxufVxcbiBcXG5wLnRlbXBlcmF0dXJlICsgZGl2IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gXFxuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgdmFyKC0tZm9udC1jb2xvcik7XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS10ZW1wLW1hcmdpbik7XFxuIFxcbiAgICBoZWlnaHQ6IDcwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG4gXFxuLnNpZGUtaW5mbyB7XFxuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xcbn1cXG4gXFxuLmVycm9yIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuICAgIGNvbG9yOiB2YXIoLS1lcnJvci1tZXNzYWdlKTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgY2xlYXJTa3kgZnJvbSAnLi9pbWFnZXMvcnlhbi11bnNwbGFzaC5qcGcnO1xuaW1wb3J0IHNub3cgZnJvbSAnLi9pbWFnZXMvYWFyb24tYnVyZGVuLXVuc3BsYXNoLmpwZyc7XG5pbXBvcnQgZHJpenpsZSBmcm9tICcuL2ltYWdlcy9yb21hbi1zeW5rZXZ5Y2gtdW5zcGxhc2guanBnJztcbmltcG9ydCByYWluIGZyb20gJy4vaW1hZ2VzL3ZhbGVudGluLW11bGxlci11bnNwbGFzaC5qcGcnO1xuaW1wb3J0IHRodW5kZXJzdG9ybSBmcm9tICcuL2ltYWdlcy9tYXgtc2FlbGluZy11bnNwbGFzaC5qcGcnO1xuaW1wb3J0IHNjYXR0ZXJlZENsb3VkcyBmcm9tICcuL2ltYWdlcy9qYW5pcy1yb3plbmZlbGRzLXVuc3BsYXNoLmpwZyc7XG5pbXBvcnQgb3ZlcmNhc3RDbG91ZHMgZnJvbSAnLi9pbWFnZXMvYW5hbmR1LXZpbm9kLXVuc3BsYXNoLmpwZyc7XG5cbi8vIE1vZHVsZSB0aGF0IGhhbmRsZXMgZXZlcnl0aGluZyBjb25jZXJuaW5nIERPTSBNYW5pcHVsYXRpb25cbmNvbnN0IGRvbUVsZW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBnZXRVc2VyUXVlcnkoKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZTtcbiAgICB9XG4gICAgLy8gQ3VycmVudGx5IGVuYWJsZXMgdGhlIHNlYXJjaCBmdW5jdGlvbmFsaXR5XG4gICAgLy8gTWlnaHQgdXNlIGl0IGZvciBtb3JlIGV2ZW50IGxpc3RlbmVycyBkb3duIHRoZSBsaW5lXG4gICAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICBjb25zdCBzZWFyY2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcbiAgICAgIHNlYXJjaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgYXBwbGljYXRpb25GbG93LmdldFdlYXRoZXJJbmZvKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIFxuICAgIC8vIEZ1bmN0aW9uIHRvIGluc2VydCBkYXRhIGluc2lkZSB0aGUgYXBwcm9wcmlhdGUgc2xvdFxuICAgIGZ1bmN0aW9uIGluc2VydERhdGEoKSB7XG4gICAgICAvLyBHZXQgdGhlIGNvbnRhaW5lciB0byBhdm9pZCByZXBlYXRlZGx5IGNhbGxpbmcgcXVlcnlTZWxlY3RvciBvbiBkb2N1bWVudFxuICAgICAgY29uc3QgaW5mb0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbmZvLWNvbnRhaW5lcicpO1xuICBcbiAgICAgIC8vIEhlYWRlciBwb3J0aW9uXG4gICAgICAvLyBCcmllZiBkZXNjcmlwdGlvbiBvZiB0aGUgd2VhdGhlciAoc3VubnksIGNsb3VkeSBlY2MuKVxuICAgICAgY29uc3Qgd2VhdGhlckRlc2NyaXB0aW9uID0gaW5mb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZ3JpZC10b3AgcCcpO1xuICAgICAgd2VhdGhlckRlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgIC8vIENpdHkgYW5kIGNvdW50cnkgbmFtZSBmb3IgbG9uZ1xuICAgICAgY29uc3QgY2l0eUFuZENvdW50cnlOYW1lID0gaW5mb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuZ3JpZC10b3AgaDEnKTtcbiAgICAgIGNpdHlBbmRDb3VudHJ5TmFtZS50ZXh0Q29udGVudCA9IGAke3RoaXMuY2l0eX0sICR7dGhpcy5jb3VudHJ5fWA7XG4gIFxuICAgICAgLy8gQm90dG9tLWxlZnQgcG9ydGlvblxuICAgICAgY29uc3QgdGVtcGVyYXR1cmVDb250YWluZXIgPSBpbmZvQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy50ZW1wZXJhdHVyZScpO1xuICAgICAgdGVtcGVyYXR1cmVDb250YWluZXIudGV4dENvbnRlbnQgPSB0aGlzLnRlbXBlcmF0dXJlO1xuICBcbiAgICAgIC8vIEJvdHRvbS1yaWdodCBwb3J0aW9uXG4gICAgICBjb25zdCBhbGxTaWRlSW5mb1BhcmFncmFwaHMgPSBBcnJheS5mcm9tKFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2lkZS1pbmZvJylcbiAgICAgICk7XG4gICAgICBhbGxTaWRlSW5mb1BhcmFncmFwaHNbMF0udGV4dENvbnRlbnQgPVxuICAgICAgICAnRmVlbHMgbGlrZTogJyArIHRoaXMudGVtcGZlZWxzbGlrZSArICfCsCc7XG4gICAgICBhbGxTaWRlSW5mb1BhcmFncmFwaHNbMV0udGV4dENvbnRlbnQgPSAnV2luZDogJyArIHRoaXMud2luZHNwZWVkICsgJ2ttL2gnO1xuICAgICAgYWxsU2lkZUluZm9QYXJhZ3JhcGhzWzJdLnRleHRDb250ZW50ID0gJ0h1bWlkaXR5OiAnICsgdGhpcy5odW1pZGl0eSArICclJztcbiAgICB9XG5cbiAgICAvLyBBcHBlbmRzIGFuIGVycm9yIGRpdiB3aXRoIGEgbWVzc2FnZSB1bmRlciB0aGUgc2VhcmNoIGJhclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVycm9yRGl2KG1lc3NhZ2UpIHtcbiAgICAgIGNvbnN0IGVycm9yRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVycm9yRGl2LmNsYXNzTGlzdC5hZGQoXCJlcnJvclwiLCBcInZpc2libGVcIik7XG4gICAgICBlcnJvckRpdi50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJcIilcbiAgICAgICAgLmluc2VydEJlZm9yZShlcnJvckRpdiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKSk7XG4gICAgfVxuICBcbiAgICAvLyBEZWxldGVzIHRoZSBlcnJvciBkaXZcbiAgICBmdW5jdGlvbiBkZWxldGVFcnJvckRpdigpIHtcbiAgICAgIGNvbnN0IGVycm9yRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lcnJvclwiKTtcbiAgICAgIGlmIChlcnJvckRpdikgZXJyb3JEaXYucmVtb3ZlKCk7XG4gICAgfVxuXG4gIC8vIExvb2tzIGF0IHRoZSBcImNvZGVcIiBwcm9wZXJ0eSBpbnNpZGUgdGhlIHdlYXRoZXIgb2JqZWN0XG4gIC8vIFRoaXMgaXMgc29tZXRoaW5nIHRoYXQgcmV0dXJucyBmcm9tIHRoZSBBUEkgQ2FsbFxuICAvLyBhbmQgd291bGQgbm9ybWFsbHkgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggd2VhdGhlciBpY29uIHRvIHVzZVxuICAvLyBXZSBhcmUgZ29pbmcgdG8gdXNlIGl0IHRvIHNldCBhIGN1c3RvbSBiYWNrZ3JvdW5kXG4gIC8vIFRoaXMgaXMgYnVpbHQgdG8gYmUgYSBtZXRob2Qgb2YgdGhlIHdlYXRoZXIgb2JqZWN0XG4gIGZ1bmN0aW9uIHNldEJhY2tncm91bmQoKSB7XG4gXG4gICAgY29uc3QgaHRtbE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdodG1sJyk7XG4gXG4gICAgc3dpdGNoKHRydWUpIHtcbiAgICAgIGNhc2UgdGhpcy5jb2RlID09PSA4MDA6IC8vIENvZGVzIGZvciBjbGVhciBza3lcbiAgICAgICAgaHRtbE5vZGUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoJ1wiICsgY2xlYXJTa3kgKyBcIicpXCJcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICh0aGlzLmNvZGUgPT09IDgwMSB8fCB0aGlzLmNvZGUgPT09IDgwMik6IC8vIENvZGVzIGZvciBmZXcgY2xvdWRzIGFuZCBzY2F0dGVyZWQgY2xvdWRzXG4gICAgICAgIGh0bWxOb2RlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKCdcIiArIHNjYXR0ZXJlZENsb3VkcyArIFwiJylcIlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKHRoaXMuY29kZSA9PT0gODAzIHx8IHRoaXMuY29kZSA9PT0gODA0KTogLy8gQ29kZXMgZm9yIGJyb2tlbiBjbG91ZHMgYW5kIG92ZXJjYXN0IGNsb3Vkc1xuICAgICAgICBodG1sTm9kZS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcInVybCgnXCIgKyBvdmVyY2FzdENsb3VkcyArIFwiJylcIlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKHRoaXMuY29kZSA+PSA2MDAgJiYgdGhpcy5jb2RlIDw9IDYyMik6IC8vIENvZGVzIGZvciBhbGwgc29ydHMgb2Ygc25vd1xuICAgICAgXCJ1cmwoJ1wiICsgc25vdyArIFwiJylcIlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKHRoaXMuY29kZSA+PSA1MDAgJiYgdGhpcy5jb2RlIDw9IDUzMSk6IC8vIENvZGVzIGZvciBhbGwgc29ydHMgb2YgcmFpblxuICAgICAgICBodG1sTm9kZS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcInVybCgnXCIgKyByYWluICsgXCInKVwiXG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAodGhpcy5jb2RlID49IDMwMCAmJiB0aGlzLmNvZGUgPD0gMzIxKTogLy8gQ29kZXMgZm9yIGFsbCBzb3J0cyBvZiBkcml6emxlXG4gICAgICAgIGh0bWxOb2RlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKCdcIiArIGRyaXp6bGUgKyBcIicpXCJcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICh0aGlzLmNvZGUgPj0gMjAwICYmIHRoaXMuY29kZSA8PSAyMzIpOiAvLyBDb2RlcyBmb3IgYWxsIHNvcnRzIG9mIHRodW5kZXJzdG9ybXNcbiAgICAgICAgaHRtbE5vZGUuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoJ1wiICsgdGh1bmRlcnN0b3JtICsgXCInKVwiXG4gICAgfVxuIFxuICB9XG4gIFxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIFxuICAgIHJldHVybiB7IGdldFVzZXJRdWVyeSwgaW5zZXJ0RGF0YSwgY3JlYXRlRXJyb3JEaXYsIGRlbGV0ZUVycm9yRGl2LCBzZXRCYWNrZ3JvdW5kIH07XG4gIH0pKCk7XG5cbmNvbnN0IFdlYXRoZXJBcGlJbnRlcmFjdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIFVzZSB0aGlzIHRvIGdpdmUgbWV0aG9kcyB0byBhIHdlYXRoZXIgb2JqZWN0XG4gIGNvbnN0IHdlYXRoZXJNZXRob2RzID0ge1xuICAgIGluc2VydERhdGE6IGRvbUVsZW1lbnRzLmluc2VydERhdGEsXG4gICAgc2V0QmFja2dyb3VuZDogZG9tRWxlbWVudHMuc2V0QmFja2dyb3VuZCxcbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaURhdGEodXNlclF1ZXJ5KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEJhc2UgVVJMIGZvciB0aGUgcXVlcnlcbiAgICAgIC8vIFNwZWNpZmllZCB1bml0cz1tZXRyaWMgYmVjYXVzZSBJIGNhbiB1bmRlcnN0YW5kIHRob3NlXG4gICAgICAvLyBJIHBsb3AgaW4gbXkgdXNlcidzIHF1ZXJ5IHRvIG1ha2UgdGhlIHNlYXJjaCBkeW5hbWljXG4gICAgICBjb25zdCBhcGlRdWVyeVVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7dXNlclF1ZXJ5fSZBUFBJRD00ODFkYWI5NzhhMjBhNDI5OThhNjMxZWZmN2Q0ZjhmNCZ1bml0cz1tZXRyaWNgO1xuIFxuICAgICAgLy8gVXNpbmcgdGhlIGZldGNoIG1ldGhvZCB3ZSBxdWVyeSB0aGUgc2VydmVyLCBhbmQgd2UgZ2V0IGJhY2sgYSByZXNwb25zZSBvYmplY3QuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVF1ZXJ5VXJsLCB7IG1vZGU6IFwiY29yc1wiIH0pO1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IHRoZSBpbmZvcm1hdGlvbiB3ZSBuZWVkLCBhbmQgZm9yIHRoYXQgd2UgY2FsbCB0aGUgLmpzb24gbWV0aG9kLlxuICAgICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAvLyBDaGVjayBmb3IgZXJyb3JzXG4gICAgICBpZiAod2VhdGhlckRhdGEuY29kID09PSBcIjQwNFwiKSB7XG4gICAgICAgIHRocm93IHdlYXRoZXJEYXRhO1xuICAgICAgfVxuICAgICAgLy8gUmV0dXJuIHRoZSBkYXRhIGF0IGxhc3RcbiAgICAgIHJldHVybiB3ZWF0aGVyRGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgYW55dGhpbmcgaXMgd3JvbmcsIGtub2NrIHVwc3RhaXJzLlxuICAgICAgcmV0dXJuIHsgaXNFcnJvcjogdHJ1ZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoaXMgdGFrZXMgdGhlIEpTT04gZGF0YSByZXR1cm5lZCBieSB0aGUgQVBJXG4gIC8vIGFuZCBleHRyYWN0cyBvbmx5IHRoZSB0aGluZ3Mgd2Ugd2lsbCBkaXNwbGF5XG4gIC8vIFRlY2huaWNhbGx5IHVubmVjZXNzYXJ5LCBidXQgaW1wcm92ZWQgcmVhZGliaWxpdHlcbiAgZnVuY3Rpb24gZXh0cmFjdFJlbGV2YW50RGF0YSh3ZWF0aGVyT2JqZWN0KSB7XG4gICAgLy8gT2JqZWN0IGxpdGVyYWwgZGVjbGFyYXRpb25cbiAgICBjb25zdCB3ZWF0aGVyID0gT2JqZWN0LmNyZWF0ZSh3ZWF0aGVyTWV0aG9kcyk7XG5cbiAgICAvLyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgd2VhdGhlciBpdHNlbGZcbiAgICB3ZWF0aGVyLnRlbXBlcmF0dXJlID0gTnVtYmVyKHdlYXRoZXJPYmplY3QubWFpbi50ZW1wKS50b0ZpeGVkKDApO1xuICAgIHdlYXRoZXIudGVtcGZlZWxzbGlrZSA9IE51bWJlcih3ZWF0aGVyT2JqZWN0Lm1haW4uZmVlbHNfbGlrZSkudG9GaXhlZCgwKTtcbiAgICB3ZWF0aGVyLmh1bWlkaXR5ID0gd2VhdGhlck9iamVjdC5tYWluLmh1bWlkaXR5O1xuICAgIHdlYXRoZXIud2luZHNwZWVkID0gTnVtYmVyKHdlYXRoZXJPYmplY3Qud2luZC5zcGVlZCkudG9GaXhlZCgxKTtcblxuICAgIC8vIEEgd29yZHkgZGVzY3JpcHRpb24gb2YgaG93IHRoZSBza3kgaXMgbGlrZVxuICAgIC8vIFRoaXMgY29kZSByZXR1cm5zIGEgY2FwaXRhbGl6ZWQgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICAvLyBCeSBkZWZhdWx0IGl0IGlzIGFsbCBsb3dlcmNhc2VcbiAgICB3ZWF0aGVyLmRlc2NyaXB0aW9uID1cbiAgICAgIHdlYXRoZXJPYmplY3Qud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgwLCAxKS50b1VwcGVyQ2FzZSgpICtcbiAgICAgIHdlYXRoZXJPYmplY3Qud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgxKTtcblxuICAgIC8vIEV4dHJhY3Qgd2VhdGhlciBjb25kaXRpb24gY29kZVxuICAgIC8vIFdpbGwgYmUgdXNlZCB0byBjaGFuZ2UgdGhlIGJhY2tncm91bmQgZGluYW1pY2FsbHlcbiAgICB3ZWF0aGVyLmNvZGUgPSB3ZWF0aGVyT2JqZWN0LndlYXRoZXJbMF0uaWQ7XG5cbiAgICAvLyBDb3VudHJ5J3MgbmFtZSBhbmQgY2l0eSdzIG5hbWU7XG4gICAgd2VhdGhlci5jaXR5ID0gd2VhdGhlck9iamVjdC5uYW1lO1xuICAgIGNvbnN0IHJlZ2lvbk5hbWVzQ29udmVydGVyID0gbmV3IEludGwuRGlzcGxheU5hbWVzKFsnZW4nXSwge1xuICAgICAgdHlwZTogJ3JlZ2lvbicsXG4gICAgfSk7XG4gICAgd2VhdGhlci5jb3VudHJ5ID0gcmVnaW9uTmFtZXNDb252ZXJ0ZXIub2Yod2VhdGhlck9iamVjdC5zeXMuY291bnRyeSk7XG5cbiAgICAvLyBDaGVjayB0aGUgcmVzdWx0XG4gICAgY29uc29sZS5sb2cod2VhdGhlcik7XG4gICAgLy8gUmV0dXJuIHRoZSByZXN1bHRcbiAgICByZXR1cm4gd2VhdGhlcjtcbiAgfVxuXG4gIHJldHVybiB7IGV4dHJhY3RSZWxldmFudERhdGEsIGZldGNoQXBpRGF0YSB9O1xufSkoKTtcblxuY29uc3QgYXBwbGljYXRpb25GbG93ID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBhc3luYyBmdW5jdGlvbiBhbGxvd3MgbWUgb3JnYW5pemUgY29kZSBpbiBhIHdheVxuICAvLyB0aGF0IG1ha2VzIGl0IHNlZW0gc3luY2hyb25vdXMsIHNvIGV4ZWN1dGluZyB0b3AgdG8gYm90dG9tLlxuICAvLyBXZSBjYW5ub3QgY2FsbCBvdXIgc2Vjb25kIGZ1bmN0aW9uIGJlZm9yZSB0aGUgZmlyc3RcbiAgLy8gcHJvbWlzZSByZXNvbHZlczogbHVja2lseSBhc3luYyBmdW5jdGlvbnMgY2FuIGhlbHAgdXNcbiAgLy8gc29sdmUgdGhhdCBwcm9ibGVtIGluIGFuIGVsZWdhbnQgYW5kIHJlYWRhYmxlIHdheS5cbiAgICBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVySW5mbygpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBkaXYsIGRlbGV0ZSBpdFxuICAgIGRvbUVsZW1lbnRzLmRlbGV0ZUVycm9yRGl2KCk7XG4gXG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0b3JlcyB3aGF0IGlzIGluIHRoZSBzZWFyY2ggYmFyXG4gICAgICBjb25zdCB1c2VySW5wdXQgPSBkb21FbGVtZW50cy5nZXRVc2VyUXVlcnkoKTtcbiAgICAgIC8vIFdlIGdldCBhIHByb21pc2UgZnJvbSBmZXRjaEFwaURhdGEsIHdhaXQgdW50aWwgaXQncyByZXNvbHZlZFxuICAgICAgY29uc3QgYXBpRGF0YSA9IGF3YWl0IFdlYXRoZXJBcGlJbnRlcmFjdGlvbi5mZXRjaEFwaURhdGEodXNlcklucHV0KTtcbiAgICAgIC8vIElmIHRoZXJlIHdhcyBhIG1pc3Rha2UsIHRoZSBhcGlEYXRhIG9iamVjdCB3aWxsXG4gICAgICAvLyBoYXZlIGFuIGlzRXJyb3IgcHJvcGVydHkgd2l0aCBhIHZhbHVlIG9mIHRydWVcbiAgICAgIGlmIChhcGlEYXRhLmlzRXJyb3IpIHRocm93IG5ldyBFcnJvcihhcGlEYXRhLm1lc3NhZ2UpO1xuIFxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gbWlzdGFrZSByZXR1cm4gdGhlIG9iamVjdCB3aXRoIGNvbmRlbnNlZCBpbmZvXG4gICAgICBsZXQgZWxhYm9yYXRlZERhdGEgPSBXZWF0aGVyQXBpSW50ZXJhY3Rpb24uZXh0cmFjdFJlbGV2YW50RGF0YShhcGlEYXRhKTtcbiAgICAgIC8vIERpc3BsYXkgaXQgZm9yIG5vd1xuICAgICAgZWxhYm9yYXRlZERhdGEuaW5zZXJ0RGF0YSgpO1xuICAgICAgLy8gRGluYW1pY2FsbHkgc2V0IHRoZSBiYWNrZ3JvdW5kIGJhc2VkIG9uIGNvZGVcbiAgICAgIGVsYWJvcmF0ZWREYXRhLnNldEJhY2tncm91bmQoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZG9tRWxlbWVudHMuY3JlYXRlRXJyb3JEaXYoZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgZ2V0V2VhdGhlckluZm8gfTtcbn0pKCk7XG5cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJkb21FbGVtZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhcHBsaWNhdGlvbkZsb3ciLCJnZXRXZWF0aGVySW5mbyIsImdldFVzZXJRdWVyeSIsInZhbHVlIiwiaW5zZXJ0RGF0YSIsImluZm9Db250YWluZXIiLCJ0ZXh0Q29udGVudCIsImRlc2NyaXB0aW9uIiwiY2l0eSIsImNvdW50cnkiLCJ0ZW1wZXJhdHVyZSIsImFsbFNpZGVJbmZvUGFyYWdyYXBocyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0ZW1wZmVlbHNsaWtlIiwid2luZHNwZWVkIiwiaHVtaWRpdHkiLCJjcmVhdGVFcnJvckRpdiIsIm1lc3NhZ2UiLCJlcnJvckRpdiIsImNsYXNzTGlzdCIsImFkZCIsImluc2VydEJlZm9yZSIsImRlbGV0ZUVycm9yRGl2Iiwic2V0QmFja2dyb3VuZCIsImh0bWxOb2RlIiwiY29kZSIsImJhY2tncm91bmRJbWFnZSIsIldlYXRoZXJBcGlJbnRlcmFjdGlvbiIsIndlYXRoZXJNZXRob2RzIiwiZXh0cmFjdFJlbGV2YW50RGF0YSIsIndlYXRoZXJPYmplY3QiLCJ3ZWF0aGVyIiwiY3JlYXRlIiwiTnVtYmVyIiwibWFpbiIsInRlbXAiLCJ0b0ZpeGVkIiwiZmVlbHNfbGlrZSIsIndpbmQiLCJzcGVlZCIsInRvVXBwZXJDYXNlIiwibmFtZSIsInJlZ2lvbk5hbWVzQ29udmVydGVyIiwiSW50bCIsIkRpc3BsYXlOYW1lcyIsInR5cGUiLCJvZiIsInN5cyIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaEFwaURhdGEiLCJhc3luYyIsInVzZXJRdWVyeSIsImFwaVF1ZXJ5VXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1vZGUiLCJ3ZWF0aGVyRGF0YSIsImpzb24iLCJjb2QiLCJlcnJvciIsImlzRXJyb3IiLCJ1c2VySW5wdXQiLCJhcGlEYXRhIiwiZWxhYm9yYXRlZERhdGEiXSwic291cmNlUm9vdCI6IiJ9