(()=>{const e=function(e){const t={};return t.temperature=e.main.temp,t.tempfeelslike=e.main.feels_like,t.humidity=e.main.humidity,t.windspeed=e.wind.speed,t.description=e.weather[0].description.slice(0,1).toUpperCase()+e.weather[0].description.slice(1),t.city=e.name,t.country=e.sys.country,console.log(t),t},t=async function(e){const t=`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=481dab978a20a42998a631eff7d4f8f4&units=metric`,n=await fetch(t,{mode:"cors"}),i=await n.json();return console.log(i),i},n=async function(){const n=i.getUserQuery();let o=await t(n),c=e(o);console.log(c)},i=(document.querySelector("button").addEventListener("click",(()=>{n()})),{getUserQuery:function(){return document.querySelector("input").value}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiTUFBQSxNQUFNQSxFQXNCRixTQUE2QkMsR0FHekIsTUFBTUMsRUFBVSxDQUFDLEVBb0JqQixPQWpCQUEsRUFBUUMsWUFBY0YsRUFBY0csS0FBS0MsS0FDekNILEVBQVFJLGNBQWdCTCxFQUFjRyxLQUFLRyxXQUMzQ0wsRUFBUU0sU0FBV1AsRUFBY0csS0FBS0ksU0FDdENOLEVBQVFPLFVBQVlSLEVBQWNTLEtBQUtDLE1BS3ZDVCxFQUFRVSxZQUFjWCxFQUFjQyxRQUFRLEdBQUdVLFlBQVlDLE1BQU0sRUFBRyxHQUFHQyxjQUFnQmIsRUFBY0MsUUFBUSxHQUFHVSxZQUFZQyxNQUFNLEdBR2xJWCxFQUFRYSxLQUFPZCxFQUFjZSxLQUM3QmQsRUFBUWUsUUFBVWhCLEVBQWNpQixJQUFJRCxRQUdwQ0UsUUFBUUMsSUFBSWxCLEdBRUxBLENBQ1gsRUE5Q0VGLEVBRUZxQixlQUE0QkMsR0FLeEIsTUFBTUMsRUFBYyxxREFBcURELHdEQUduRUUsUUFBaUJDLE1BQU1GLEVBQWEsQ0FBRUcsS0FBTSxTQUU1Q0MsUUFBb0JILEVBQVNJLE9BSW5DLE9BRkFULFFBQVFDLElBQUlPLEdBRUxBLENBQ1gsRUFtQ0VFLEVBT0ZSLGlCQUVJLE1BQU1TLEVBQVlDLEVBQVlDLGVBRTlCLElBQUlDLFFBQWdCakMsRUFBbUM4QixHQUVuREksRUFBaUJsQyxFQUEwQ2lDLEdBRS9EZCxRQUFRQyxJQUFJYyxFQUNoQixFQU9FSCxHQVF1QkksU0FBU0MsY0FBYyxVQUMvQkMsaUJBQWlCLFNBQVMsS0FBT1IsR0FBK0IsSUFLMUUsQ0FBQ0csYUFaUixXQUNFLE9BQU9HLFNBQVNDLGNBQWMsU0FBU0UsS0FDekMsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV2VhdGhlckFwaUludGVyYWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXBpRGF0YSh1c2VyUXVlcnkpIHtcblxuICAgICAgICAvLyBCYXNlIFVSTCBmb3IgdGhlIHF1ZXJ5XG4gICAgICAgIC8vIFNwZWNpZmllZCB1bml0cz1tZXRyaWMgYmVjYXVzZSBJIGNhbiB1bmRlcnN0YW5kIHRob3NlXG4gICAgICAgIC8vIEkgcGxvcCBpbiBteSB1c2VyJ3MgcXVlcnkgdG8gbWFrZSB0aGUgc2VhcmNoIGR5bmFtaWNcbiAgICAgICAgY29uc3QgYXBpUXVlcnlVcmwgPSBgaHR0cHM6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0ke3VzZXJRdWVyeX0mQVBQSUQ9NDgxZGFiOTc4YTIwYTQyOTk4YTYzMWVmZjdkNGY4ZjQmdW5pdHM9bWV0cmljYDtcblxuICAgICAgICAvLyBVc2luZyB0aGUgZmV0Y2ggbWV0aG9kIHdlIHF1ZXJ5IHRoZSBzZXJ2ZXIsIGFuZCB3ZSBnZXQgYmFjayBhIHJlc3BvbnNlIG9iamVjdC5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlRdWVyeVVybCwgeyBtb2RlOiAnY29ycycgfSk7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZXh0cmFjdCB0aGUgaW5mb3JtYXRpb24gd2UgbmVlZCwgYW5kIGZvciB0aGF0IHdlIGNhbGwgdGhlIC5qc29uIG1ldGhvZC5cbiAgICAgICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIC8vIENvbnNvbGUgbG9nIHRvIHNlZSBpZiBpdCdzIHdvcmtpbmcuXG4gICAgICAgIGNvbnNvbGUubG9nKHdlYXRoZXJEYXRhKTtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBkYXRhIGF0IGxhc3RcbiAgICAgICAgcmV0dXJuIHdlYXRoZXJEYXRhO1xuICAgIH1cblxuICAgIC8vIFRoaXMgdGFrZXMgdGhlIEpTT04gZGF0YSByZXR1cm5lZCBieSB0aGUgQVBJXG4gICAgLy8gYW5kIGV4dHJhY3RzIG9ubHkgdGhlIHRoaW5ncyB3ZSB3aWxsIGRpc3BsYXlcbiAgICAvLyBUZWNobmljYWxseSB1bm5lY2Vzc2FyeSwgYnV0IGltcHJvdmVkIHJlYWRpYmlsaXR5XG4gICAgZnVuY3Rpb24gZXh0cmFjdFJlbGV2YW50RGF0YSh3ZWF0aGVyT2JqZWN0KSB7XG5cbiAgICAgICAgLy8gT2JqZWN0IGxpdGVyYWwgZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3Qgd2VhdGhlciA9IHt9O1xuICAgICAgICBcbiAgICAgICAgLy8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHdlYXRoZXIgaXRzZWxmXG4gICAgICAgIHdlYXRoZXIudGVtcGVyYXR1cmUgPSB3ZWF0aGVyT2JqZWN0Lm1haW4udGVtcDtcbiAgICAgICAgd2VhdGhlci50ZW1wZmVlbHNsaWtlID0gd2VhdGhlck9iamVjdC5tYWluLmZlZWxzX2xpa2U7XG4gICAgICAgIHdlYXRoZXIuaHVtaWRpdHkgPSB3ZWF0aGVyT2JqZWN0Lm1haW4uaHVtaWRpdHk7XG4gICAgICAgIHdlYXRoZXIud2luZHNwZWVkID0gd2VhdGhlck9iamVjdC53aW5kLnNwZWVkO1xuICAgICAgICBcbiAgICAgICAgLy8gQSB3b3JkeSBkZXNjcmlwdGlvbiBvZiBob3cgdGhlIHNreSBpcyBsaWtlXG4gICAgICAgIC8vIFRoaXMgY29kZSByZXR1cm5zIGEgY2FwaXRhbGl6ZWQgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICAgICAgLy8gQnkgZGVmYXVsdCBpdCBpcyBhbGwgbG93ZXJjYXNlXG4gICAgICAgIHdlYXRoZXIuZGVzY3JpcHRpb24gPSB3ZWF0aGVyT2JqZWN0LndlYXRoZXJbMF0uZGVzY3JpcHRpb24uc2xpY2UoMCwgMSkudG9VcHBlckNhc2UoKSArIHdlYXRoZXJPYmplY3Qud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgxKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvdW50cnkncyBuYW1lIGFuZCBjaXR5J3MgbmFtZTtcbiAgICAgICAgd2VhdGhlci5jaXR5ID0gd2VhdGhlck9iamVjdC5uYW1lO1xuICAgICAgICB3ZWF0aGVyLmNvdW50cnkgPSB3ZWF0aGVyT2JqZWN0LnN5cy5jb3VudHJ5O1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgdGhlIHJlc3VsdFxuICAgICAgICBjb25zb2xlLmxvZyh3ZWF0aGVyKTtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSByZXN1bHRcbiAgICAgICAgcmV0dXJuIHdlYXRoZXI7XG4gICAgfVxuIFxuICAgIHJldHVybiB7ZXh0cmFjdFJlbGV2YW50RGF0YSwgZmV0Y2hBcGlEYXRhfVxuICAgIFxufSkoKTtcblxuY29uc3QgYXBwbGljYXRpb25GbG93ID0gKGZ1bmN0aW9uKCkge1xuIFxuICAgIC8vIFRoaXMgYXN5bmMgZnVuY3Rpb24gYWxsb3dzIG1lIG9yZ2FuaXplIGNvZGUgaW4gYSB3YXlcbiAgICAvLyB0aGF0IG1ha2VzIGl0IHNlZW0gc3luY2hyb25vdXMsIHNvIGV4ZWN1dGluZyB0b3AgdG8gYm90dG9tLlxuICAgIC8vIFdlIGNhbm5vdCBjYWxsIG91ciBzZWNvbmQgZnVuY3Rpb24gYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHByb21pc2UgcmVzb2x2ZXM6IGx1Y2tpbHkgYXN5bmMgZnVuY3Rpb25zIGNhbiBoZWxwIHVzXG4gICAgLy8gc29sdmUgdGhhdCBwcm9ibGVtIGluIGFuIGVsZWdhbnQgYW5kIHJlYWRhYmxlIHdheS5cbiAgICBhc3luYyBmdW5jdGlvbiBnZXRXZWF0aGVySW5mbygpIHtcbiAgICAgICAgLy8gU3RvcmVzIHdoYXQgaXMgaW4gdGhlIHNlYXJjaCBiYXJcbiAgICAgICAgY29uc3QgdXNlcklucHV0ID0gZG9tRWxlbWVudHMuZ2V0VXNlclF1ZXJ5KCk7XG4gICAgICAgIC8vIFdlIGdldCBhIHByb21pc2UgZnJvbSBmZXRjaEFwaURhdGEsIHdhaXQgdW50aWwgaXQncyByZXNvbHZlZFxuICAgICAgICBsZXQgYXBpRGF0YSA9IGF3YWl0IFdlYXRoZXJBcGlJbnRlcmFjdGlvbi5mZXRjaEFwaURhdGEodXNlcklucHV0KTtcbiAgICAgICAgLy8gVGhlbiB1c2UgdGhpcyB0byByZXR1cm4gdGhlIG9iamVjdCB3aXRoIGNvbmRlbnNlZCBpbmZvXG4gICAgICAgIGxldCBlbGFib3JhdGVkRGF0YSA9IFdlYXRoZXJBcGlJbnRlcmFjdGlvbi5leHRyYWN0UmVsZXZhbnREYXRhKGFwaURhdGEpO1xuICAgICAgICAvLyBEaXNwbGF5IGl0IGZvciBub3dcbiAgICAgICAgY29uc29sZS5sb2coZWxhYm9yYXRlZERhdGEpO1xuICAgIH1cbiBcbiAgICByZXR1cm4ge2dldFdlYXRoZXJJbmZvfVxuIFxufSkoKTtcblxuLy8gTW9kdWxlIHRoYXQgaGFuZGxlcyBldmVyeXRoaW5nIGNvbmNlcm5pbmcgRE9NIE1hbmlwdWxhdGlvblxuY29uc3QgZG9tRWxlbWVudHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgXG4gICAgZnVuY3Rpb24gZ2V0VXNlclF1ZXJ5KCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWU7XG4gICAgfVxuICAgIC8vIEN1cnJlbnRseSBlbmFibGVzIHRoZSBzZWFyY2ggZnVuY3Rpb25hbGl0eVxuICAgIC8vIE1pZ2h0IHVzZSBpdCBmb3IgbW9yZSBldmVudCBsaXN0ZW5lcnMgZG93biB0aGUgbGluZVxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICBjb25zdCBzZWFyY2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcbiAgICAgICAgc2VhcmNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge2FwcGxpY2F0aW9uRmxvdy5nZXRXZWF0aGVySW5mbygpfSlcbiAgICB9XG5cbiAgICBhZGRFdmVudExpc3RlbmVycygpO1xuICAgXG4gICAgcmV0dXJuIHtnZXRVc2VyUXVlcnl9XG5cbiAgfSkoKTtcbiAgIl0sIm5hbWVzIjpbIldlYXRoZXJBcGlJbnRlcmFjdGlvbiIsIndlYXRoZXJPYmplY3QiLCJ3ZWF0aGVyIiwidGVtcGVyYXR1cmUiLCJtYWluIiwidGVtcCIsInRlbXBmZWVsc2xpa2UiLCJmZWVsc19saWtlIiwiaHVtaWRpdHkiLCJ3aW5kc3BlZWQiLCJ3aW5kIiwic3BlZWQiLCJkZXNjcmlwdGlvbiIsInNsaWNlIiwidG9VcHBlckNhc2UiLCJjaXR5IiwibmFtZSIsImNvdW50cnkiLCJzeXMiLCJjb25zb2xlIiwibG9nIiwiYXN5bmMiLCJ1c2VyUXVlcnkiLCJhcGlRdWVyeVVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtb2RlIiwid2VhdGhlckRhdGEiLCJqc29uIiwiYXBwbGljYXRpb25GbG93IiwidXNlcklucHV0IiwiZG9tRWxlbWVudHMiLCJnZXRVc2VyUXVlcnkiLCJhcGlEYXRhIiwiZWxhYm9yYXRlZERhdGEiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9