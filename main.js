(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),s=t(667),A=t.n(s),c=new URL(t(113),t.b),p=new URL(t(269),t.b),l=a()(o()),d=A()(c),u=A()(p);l.push([n.id,":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url("+d+");\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url("+u+");\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n ","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,gEAAgE;IAChE,mBAAmB;IACnB,2BAA2B;AAC/B;;AAEA;IACI,qBAAqB;IACrB,4CAA2B;AAC/B;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,WAAW;;IAEX,yDAAwD;IACxD,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,kBAAkB;;IAElB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,QAAQ;AACZ;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;;IAE1B,uBAAuB;IACvB,kBAAkB;;IAElB,6BAA6B;IAC7B,YAAY;;IAEZ,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,yCAAyC;IACzC,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,iBAAiB;;IAEjB,mBAAmB;;IAEnB,kBAAkB;;IAElB,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,YAAY;;IAEZ,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,wCAAwC;;IAExC,kBAAkB;;IAElB,wBAAwB;;AAE5B;;AAEA;IACI,eAAe;IACf,kBAAkB;;IAElB,yBAAyB;IACzB,mBAAmB;IACnB,iBAAiB;;IAEjB,8BAA8B;AAClC;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,8BAA8B;;IAE9B,kBAAkB;IAClB,iBAAiB;IACjB;AACJ;;AAEA;IACI,aAAa;IACb,mBAAmB;;IAEnB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;;IAEtB,uBAAuB;IACvB,6BAA6B;;IAE7B,wCAAwC;IACxC,YAAY;IACZ,gCAAgC;;IAEhC,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB",sourcesContent:[":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url(./fonts/hello.ttf);\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url(./images/nick-dunlap-unsplash.jpg);\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n "],sourceRoot:""}]);const f=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var c=0;c<n.length;c++){var p=[].concat(n[c]);r&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var A=n[s],c=r.base?A[0]+r.base:A[0],p=i[c]||0,l="".concat(c," ").concat(p);i[c]=p+1;var d=t(l),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var A=r(n,o),c=0;c<i.length;c++){var p=t(i[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},113:(n,e,t)=>{n.exports=t.p+"292bdf409c7b9c1c5683.ttf"},269:(n,e,t)=>{n.exports=t.p+"bb96d99dcb23a21a86c5.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),A=t.n(s),c=t(216),p=t.n(c),l=t(589),d=t.n(l),u=t(426),f={};f.styleTagTransform=d(),f.setAttributes=A(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m=(document.querySelector("button").addEventListener("click",(()=>{h.getWeatherInfo()})),{getUserQuery:function(){return document.querySelector("input").value},insertData:function(){const n=document.querySelector(".info-container");n.querySelector(".grid-top p").textContent=this.description,n.querySelector(".grid-top h1").textContent=`${this.city}, ${this.country}`,n.querySelector(".temperature").textContent=this.temperature;const e=Array.from(document.querySelectorAll(".side-info"));e[0].textContent="Feels like: "+this.tempfeelslike+"°",e[1].textContent="Wind: "+this.windspeed+"km/h",e[2].textContent="Humidity: "+this.humidity+"%"}}),g=function(){const n={insertData:m.insertData};return{extractRelevantData:function(e){const t=Object.create(n);t.temperature=Number(e.main.temp).toFixed(0),t.tempfeelslike=Number(e.main.feels_like).toFixed(0),t.humidity=e.main.humidity,t.windspeed=Number(e.wind.speed).toFixed(1),t.description=e.weather[0].description.slice(0,1).toUpperCase()+e.weather[0].description.slice(1),t.city=e.name;const r=new Intl.DisplayNames(["en"],{type:"region"});return t.country=r.of(e.sys.country),console.log(t),t},fetchApiData:async function(n){const e=`https://api.openweathermap.org/data/2.5/weather?q=${n}&APPID=481dab978a20a42998a631eff7d4f8f4&units=metric`,t=await fetch(e,{mode:"cors"}),r=await t.json();return console.log(r),r}}}(),h={getWeatherInfo:async function(){const n=m.getUserQuery();let e=await g.fetchApiData(n);g.extractRelevantData(e).insertData()}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,