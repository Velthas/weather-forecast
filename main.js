(()=>{const t=(document.querySelector("button").addEventListener("click",(()=>{n.getWeatherInfo()})),{getUserQuery:function(){return document.querySelector("input").value},insertData:function(){const t=document.querySelector(".info-container");t.querySelector(".grid-top p").textContent=this.description,t.querySelector(".grid-top h1").textContent=`${this.city}, ${this.country}`,t.querySelector(".temperature").textContent=this.temperature;const e=Array.from(document.querySelectorAll(".side-info"));e[0].textContent="Feels like: "+this.tempfeelslike+"Â°",e[1].textContent="Wind: "+this.windspeed+"km/h",e[2].textContent="Humidity: "+this.humidity+"%"}}),e=function(){const e={insertData:t.insertData};return{extractRelevantData:function(t){const n=Object.create(e);n.temperature=t.main.temp,n.tempfeelslike=t.main.feels_like,n.humidity=t.main.humidity,n.windspeed=t.wind.speed,n.description=t.weather[0].description.slice(0,1).toUpperCase()+t.weather[0].description.slice(1),n.city=t.name;const i=new Intl.DisplayNames(["en"],{type:"region"});return n.country=i.of(t.sys.country),console.log(n),n},fetchApiData:async function(t){const e=`https://api.openweathermap.org/data/2.5/weather?q=${t}&APPID=481dab978a20a42998a631eff7d4f8f4&units=metric`,n=await fetch(e,{mode:"cors"}),i=await n.json();return console.log(i),i}}}(),n={getWeatherInfo:async function(){const n=t.getUserQuery();let i=await e.fetchApiData(n);e.extractRelevantData(i).insertData()}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,