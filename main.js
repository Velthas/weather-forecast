(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),s=t(667),c=t.n(s),A=new URL(t(113),t.b),p=new URL(t(269),t.b),l=a()(o()),d=c()(A),u=c()(p);l.push([n.id,":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n    --error-message: #ff0000;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url("+d+");\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url("+u+");\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n \n.error {\n    text-transform: capitalize;\n    color: var(--error-message);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,wBAAwB;IACxB,gEAAgE;IAChE,mBAAmB;IACnB,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;IACrB,4CAA2B;AAC/B;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,WAAW;;IAEX,yDAAwD;IACxD,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,kBAAkB;;IAElB,aAAa;IACb,sBAAsB;IACtB,qBAAqB;IACrB,QAAQ;AACZ;;AAEA;IACI,iBAAiB;IACjB,0BAA0B;;IAE1B,uBAAuB;IACvB,kBAAkB;;IAElB,6BAA6B;IAC7B,YAAY;;IAEZ,wBAAwB;IACxB,eAAe;AACnB;;AAEA;IACI,yCAAyC;IACzC,yCAAyC;AAC7C;;AAEA;IACI,iBAAiB;IACjB,yBAAyB;IACzB,iBAAiB;;IAEjB,mBAAmB;;IAEnB,kBAAkB;;IAElB,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,YAAY;;IAEZ,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,wCAAwC;;IAExC,kBAAkB;;IAElB,wBAAwB;;AAE5B;;AAEA;IACI,eAAe;IACf,kBAAkB;;IAElB,yBAAyB;IACzB,mBAAmB;IACnB,iBAAiB;;IAEjB,8BAA8B;AAClC;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;IACf,8BAA8B;;IAE9B,kBAAkB;IAClB,iBAAiB;IACjB;AACJ;;AAEA;IACI,aAAa;IACb,mBAAmB;;IAEnB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;;IAEtB,uBAAuB;IACvB,6BAA6B;;IAE7B,wCAAwC;IACxC,YAAY;IACZ,gCAAgC;;IAEhC,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,0BAA0B;IAC1B,2BAA2B;AAC/B",sourcesContent:[":root {\n    --font-color: whitesmoke;\n    --font-stack: 'oswald', Georgia, 'Times New Roman', Times, serif;\n    --temp-margin: 20px;\n    --button-highlight: #54a097;\n    --error-message: #ff0000;\n}\n \n@font-face {\n    font-family: 'Oswald';\n    src: url(./fonts/hello.ttf);\n}\n \n* {\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n \nhtml {\n    height: 100%;\n    width: 100%;\n \n    background-image: url(./images/nick-dunlap-unsplash.jpg);\n    background-size: cover;\n}\n \n.header {\n    width: 100%;\n    padding: 10px 20px;\n    \n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap: 8px;\n}\n \n.header button {\n    padding: 5px 16px;\n    text-transform: capitalize;\n \n    border: 1px solid white;\n    border-radius: 3px;\n \n    background-color: transparent;\n    color: white;\n \n    transition: 0.3s ease-in;\n    cursor: pointer;\n}\n \n.header button:hover {\n    background-color: var(--button-highlight);\n    border: 1px solid var(--button-highlight);\n}\n \n.header p {\n    font-size: 1.5rem;\n    text-transform: uppercase;\n    font-weight: bold;\n \n    letter-spacing: 5px;\n    \n    margin-bottom: 5px;\n \n    color: var(--font-color);\n    font-family: var(--font-stack)\n}\n \n.header input[type=\"text\"] {\n    height: 25px;\n    width: 200px;\n \n    padding: 3px 5px;\n    border: none;\n    border-radius: 2px;\n}\n \n.info-container {\n    display: grid; \n    grid-template: 1fr 1fr / min-content 1fr;\n \n    padding: 10px 20px;\n \n    color: var(--font-color);\n    \n}\n \n.grid-top {\n    grid-row: 1 / 2;\n    grid-column: 1 / 3;\n \n    text-transform: uppercase;\n    letter-spacing: 4px;\n    font-size: 1.5rem;\n \n    font-family: var(--font-stack);\n}\n \n.grid-top p {\n    font-size: 1.35rem\n}\n \n.temperature {\n    font-size: 7rem;\n    font-family: var(--font-stack);\n \n    align-self: center;\n    margin-top: -25px;\n    margin-right: var(--temp-margin)\n}\n \n.temperature::after {\n    content: '°C';\n    font-size: xx-large;\n \n    position: relative;\n    bottom: 80px;\n}\n \np.temperature + div {\n    display: flex;\n    flex-direction: column;\n \n    align-items: flex-start;\n    justify-content: space-evenly;\n \n    border-left: 2px solid var(--font-color);\n    padding: 3px;\n    padding-left: var(--temp-margin);\n \n    height: 70%;\n    align-self: center;\n}\n \n.side-info {\n    font-size: 1.3rem;\n}\n \n.error {\n    text-transform: capitalize;\n    color: var(--error-message);\n}"],sourceRoot:""}]);const f=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var A=0;A<n.length;A++){var p=[].concat(n[A]);r&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],p=i[A]||0,l="".concat(A," ").concat(p);i[A]=p+1;var d=t(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=r(n,o),A=0;A<i.length;A++){var p=t(i[A]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},113:(n,e,t)=>{n.exports=t.p+"292bdf409c7b9c1c5683.ttf"},269:(n,e,t)=>{n.exports=t.p+"bb96d99dcb23a21a86c5.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),A=t(216),p=t.n(A),l=t(589),d=t.n(l),u=t(426),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m=(document.querySelector("button").addEventListener("click",(()=>{h.getWeatherInfo()})),{getUserQuery:function(){return document.querySelector("input").value},insertData:function(){const n=document.querySelector(".info-container");n.querySelector(".grid-top p").textContent=this.description,n.querySelector(".grid-top h1").textContent=`${this.city}, ${this.country}`,n.querySelector(".temperature").textContent=this.temperature;const e=Array.from(document.querySelectorAll(".side-info"));e[0].textContent="Feels like: "+this.tempfeelslike+"°",e[1].textContent="Wind: "+this.windspeed+"km/h",e[2].textContent="Humidity: "+this.humidity+"%"},createErrorDiv:function(n){const e=document.createElement("div");e.classList.add("error","visible"),e.textContent=n,document.querySelector(".header").insertBefore(e,document.querySelector("button"))},deleteErrorDiv:function(){const n=document.querySelector(".error");n&&n.remove()}}),g=function(){const n={insertData:m.insertData};return{extractRelevantData:function(e){const t=Object.create(n);t.temperature=Number(e.main.temp).toFixed(0),t.tempfeelslike=Number(e.main.feels_like).toFixed(0),t.humidity=e.main.humidity,t.windspeed=Number(e.wind.speed).toFixed(1),t.description=e.weather[0].description.slice(0,1).toUpperCase()+e.weather[0].description.slice(1),t.city=e.name;const r=new Intl.DisplayNames(["en"],{type:"region"});return t.country=r.of(e.sys.country),console.log(t),t},fetchApiData:async function(n){try{const e=`https://api.openweathermap.org/data/2.5/weather?q=${n}&APPID=481dab978a20a42998a631eff7d4f8f4&units=metric`,t=await fetch(e,{mode:"cors"}),r=await t.json();if("404"===r.cod)throw r;return r}catch(n){return{isError:!0,message:n.message}}}}}(),h={getWeatherInfo:async function(){m.deleteErrorDiv();try{const n=m.getUserQuery(),e=await g.fetchApiData(n);if(e.isError)throw new Error(e.message);g.extractRelevantData(e).insertData()}catch(n){return void m.createErrorDiv(n.message)}}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUIsSUFJRSxNQUFNQyxFQUFjLHFEQUFxREQsd0RBR25FRSxRQUFpQkMsTUFBTUYsRUFBYSxDQUFFRyxLQUFNLFNBRTVDQyxRQUFvQkgsRUFBU0ksT0FFbkMsR0FBd0IsUUFBcEJELEVBQVlFLElBQ2QsTUFBTUYsRUFHUixPQUFPQSxDQUlULENBSEUsTUFBT0csR0FFUCxNQUFPLENBQUVDLFNBQVMsRUFBTXhDLFFBQVN1QyxFQUFNdkMsUUFDekMsQ0FDRixFQW9DRCxDQS9ENkIsR0FpRXhCbkIsRUE2QkcsQ0FBRUMsZUF2QlBnRCxpQkFFQW5ELEVBQVkwQixpQkFFWixJQUVFLE1BQU1vQyxFQUFZOUQsRUFBWUksZUFFeEIyRCxRQUFnQnBDLEVBQXNCdUIsYUFBYVksR0FHekQsR0FBSUMsRUFBUUYsUUFBUyxNQUFNLElBQUlySCxNQUFNdUgsRUFBUTFDLFNBR3hCTSxFQUFzQkUsb0JBQW9Ca0MsR0FFaER6RCxZQUlqQixDQUhFLE1BQU9zRCxHQUVQLFlBREE1RCxFQUFZb0IsZUFBZXdDLEVBQU12QyxRQUVuQyxDQUNGLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYXRoZXItZm9yZWNhc3Qvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vd2VhdGhlci1mb3JlY2FzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly93ZWF0aGVyLWZvcmVjYXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ZvbnRzL2hlbGxvLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4vaW1hZ2VzL25pY2stZHVubGFwLXVuc3BsYXNoLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAgIC0tZm9udC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgLS1mb250LXN0YWNrOiAnb3N3YWxkJywgR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgLS10ZW1wLW1hcmdpbjogMjBweDtcXG4gICAgLS1idXR0b24taGlnaGxpZ2h0OiAjNTRhMDk3O1xcbiAgICAtLWVycm9yLW1lc3NhZ2U6ICNmZjAwMDA7XFxufVxcbiBcXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdPc3dhbGQnO1xcbiAgICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxufVxcbiBcXG4qIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG4gXFxuaHRtbCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuIFxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbn1cXG4gXFxuLmhlYWRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICAgIFxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICAgIGdhcDogOHB4O1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b24ge1xcbiAgICBwYWRkaW5nOiA1cHggMTZweDtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuIFxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiBcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gXFxuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZS1pbjtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4gXFxuLmhlYWRlciBidXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1idXR0b24taGlnaGxpZ2h0KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYnV0dG9uLWhpZ2hsaWdodCk7XFxufVxcbiBcXG4uaGVhZGVyIHAge1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuIFxcbiAgICBsZXR0ZXItc3BhY2luZzogNXB4O1xcbiAgICBcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjaylcXG59XFxuIFxcbi5oZWFkZXIgaW5wdXRbdHlwZT1cXFwidGV4dFxcXCJdIHtcXG4gICAgaGVpZ2h0OiAyNXB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuIFxcbiAgICBwYWRkaW5nOiAzcHggNXB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXG59XFxuIFxcbi5pbmZvLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7IFxcbiAgICBncmlkLXRlbXBsYXRlOiAxZnIgMWZyIC8gbWluLWNvbnRlbnQgMWZyO1xcbiBcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiBcXG4gICAgY29sb3I6IHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBcXG59XFxuIFxcbi5ncmlkLXRvcCB7XFxuICAgIGdyaWQtcm93OiAxIC8gMjtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAzO1xcbiBcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDRweDtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuIFxcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxufVxcbiBcXG4uZ3JpZC10b3AgcCB7XFxuICAgIGZvbnQtc2l6ZTogMS4zNXJlbVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlIHtcXG4gICAgZm9udC1zaXplOiA3cmVtO1xcbiAgICBmb250LWZhbWlseTogdmFyKC0tZm9udC1zdGFjayk7XFxuIFxcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IC0yNXB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLXRlbXAtbWFyZ2luKVxcbn1cXG4gXFxuLnRlbXBlcmF0dXJlOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6ICfCsEMnO1xcbiAgICBmb250LXNpemU6IHh4LWxhcmdlO1xcbiBcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBib3R0b206IDgwcHg7XFxufVxcbiBcXG5wLnRlbXBlcmF0dXJlICsgZGl2IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gXFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG4gXFxuICAgIGJvcmRlci1sZWZ0OiAycHggc29saWQgdmFyKC0tZm9udC1jb2xvcik7XFxuICAgIHBhZGRpbmc6IDNweDtcXG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS10ZW1wLW1hcmdpbik7XFxuIFxcbiAgICBoZWlnaHQ6IDcwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG4gXFxuLnNpZGUtaW5mbyB7XFxuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xcbn1cXG4gXFxuLmVycm9yIHtcXG4gICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XFxuICAgIGNvbG9yOiB2YXIoLS1lcnJvci1tZXNzYWdlKTtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHdCQUF3QjtJQUN4QixnRUFBZ0U7SUFDaEUsbUJBQW1CO0lBQ25CLDJCQUEyQjtJQUMzQix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsNENBQTJCO0FBQy9COztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixTQUFTO0FBQ2I7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVzs7SUFFWCx5REFBd0Q7SUFDeEQsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjs7SUFFbEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsUUFBUTtBQUNaOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLDBCQUEwQjs7SUFFMUIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjs7SUFFbEIsNkJBQTZCO0lBQzdCLFlBQVk7O0lBRVosd0JBQXdCO0lBQ3hCLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx5Q0FBeUM7SUFDekMseUNBQXlDO0FBQzdDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixpQkFBaUI7O0lBRWpCLG1CQUFtQjs7SUFFbkIsa0JBQWtCOztJQUVsQix3QkFBd0I7SUFDeEI7QUFDSjs7QUFFQTtJQUNJLFlBQVk7SUFDWixZQUFZOztJQUVaLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHdDQUF3Qzs7SUFFeEMsa0JBQWtCOztJQUVsQix3QkFBd0I7O0FBRTVCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjs7SUFFbEIseUJBQXlCO0lBQ3pCLG1CQUFtQjtJQUNuQixpQkFBaUI7O0lBRWpCLDhCQUE4QjtBQUNsQzs7QUFFQTtJQUNJO0FBQ0o7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsOEJBQThCOztJQUU5QixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCO0FBQ0o7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1COztJQUVuQixrQkFBa0I7SUFDbEIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7O0lBRXRCLHVCQUF1QjtJQUN2Qiw2QkFBNkI7O0lBRTdCLHdDQUF3QztJQUN4QyxZQUFZO0lBQ1osZ0NBQWdDOztJQUVoQyxXQUFXO0lBQ1gsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksMEJBQTBCO0lBQzFCLDJCQUEyQjtBQUMvQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI6cm9vdCB7XFxuICAgIC0tZm9udC1jb2xvcjogd2hpdGVzbW9rZTtcXG4gICAgLS1mb250LXN0YWNrOiAnb3N3YWxkJywgR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgLS10ZW1wLW1hcmdpbjogMjBweDtcXG4gICAgLS1idXR0b24taGlnaGxpZ2h0OiAjNTRhMDk3O1xcbiAgICAtLWVycm9yLW1lc3NhZ2U6ICNmZjAwMDA7XFxufVxcbiBcXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdPc3dhbGQnO1xcbiAgICBzcmM6IHVybCguL2ZvbnRzL2hlbGxvLnR0Zik7XFxufVxcbiBcXG4qIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG4gXFxuaHRtbCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuIFxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi9pbWFnZXMvbmljay1kdW5sYXAtdW5zcGxhc2guanBnKTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG59XFxuIFxcbi5oZWFkZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xcbiAgICBcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgICBnYXA6IDhweDtcXG59XFxuIFxcbi5oZWFkZXIgYnV0dG9uIHtcXG4gICAgcGFkZGluZzogNXB4IDE2cHg7XFxuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbiBcXG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBjb2xvcjogd2hpdGU7XFxuIFxcbiAgICB0cmFuc2l0aW9uOiAwLjNzIGVhc2UtaW47XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuIFxcbi5oZWFkZXIgYnV0dG9uOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYnV0dG9uLWhpZ2hsaWdodCk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJ1dHRvbi1oaWdobGlnaHQpO1xcbn1cXG4gXFxuLmhlYWRlciBwIHtcXG4gICAgZm9udC1zaXplOiAxLjVyZW07XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiBcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDVweDtcXG4gICAgXFxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcXG4gXFxuICAgIGNvbG9yOiB2YXIoLS1mb250LWNvbG9yKTtcXG4gICAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtc3RhY2spXFxufVxcbiBcXG4uaGVhZGVyIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICAgIGhlaWdodDogMjVweDtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiBcXG4gICAgcGFkZGluZzogM3B4IDVweDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XFxufVxcbiBcXG4uaW5mby1jb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBncmlkOyBcXG4gICAgZ3JpZC10ZW1wbGF0ZTogMWZyIDFmciAvIG1pbi1jb250ZW50IDFmcjtcXG4gXFxuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcXG4gXFxuICAgIGNvbG9yOiB2YXIoLS1mb250LWNvbG9yKTtcXG4gICAgXFxufVxcbiBcXG4uZ3JpZC10b3Age1xcbiAgICBncmlkLXJvdzogMSAvIDI7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMztcXG4gXFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICAgIGxldHRlci1zcGFjaW5nOiA0cHg7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiBcXG4gICAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtc3RhY2spO1xcbn1cXG4gXFxuLmdyaWQtdG9wIHAge1xcbiAgICBmb250LXNpemU6IDEuMzVyZW1cXG59XFxuIFxcbi50ZW1wZXJhdHVyZSB7XFxuICAgIGZvbnQtc2l6ZTogN3JlbTtcXG4gICAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtc3RhY2spO1xcbiBcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAtMjVweDtcXG4gICAgbWFyZ2luLXJpZ2h0OiB2YXIoLS10ZW1wLW1hcmdpbilcXG59XFxuIFxcbi50ZW1wZXJhdHVyZTo6YWZ0ZXIge1xcbiAgICBjb250ZW50OiAnwrBDJztcXG4gICAgZm9udC1zaXplOiB4eC1sYXJnZTtcXG4gXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgYm90dG9tOiA4MHB4O1xcbn1cXG4gXFxucC50ZW1wZXJhdHVyZSArIGRpdiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuIFxcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuIFxcbiAgICBib3JkZXItbGVmdDogMnB4IHNvbGlkIHZhcigtLWZvbnQtY29sb3IpO1xcbiAgICBwYWRkaW5nOiAzcHg7XFxuICAgIHBhZGRpbmctbGVmdDogdmFyKC0tdGVtcC1tYXJnaW4pO1xcbiBcXG4gICAgaGVpZ2h0OiA3MCU7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuIFxcbi5zaWRlLWluZm8ge1xcbiAgICBmb250LXNpemU6IDEuM3JlbTtcXG59XFxuIFxcbi5lcnJvciB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbiAgICBjb2xvcjogdmFyKC0tZXJyb3ItbWVzc2FnZSk7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuXG4vLyBNb2R1bGUgdGhhdCBoYW5kbGVzIGV2ZXJ5dGhpbmcgY29uY2VybmluZyBET00gTWFuaXB1bGF0aW9uXG5jb25zdCBkb21FbGVtZW50cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0VXNlclF1ZXJ5KCkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWU7XG4gICAgfVxuICAgIC8vIEN1cnJlbnRseSBlbmFibGVzIHRoZSBzZWFyY2ggZnVuY3Rpb25hbGl0eVxuICAgIC8vIE1pZ2h0IHVzZSBpdCBmb3IgbW9yZSBldmVudCBsaXN0ZW5lcnMgZG93biB0aGUgbGluZVxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XG4gICAgICBzZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGFwcGxpY2F0aW9uRmxvdy5nZXRXZWF0aGVySW5mbygpO1xuICAgICAgfSk7XG4gICAgfVxuICBcbiAgICAvLyBGdW5jdGlvbiB0byBpbnNlcnQgZGF0YSBpbnNpZGUgdGhlIGFwcHJvcHJpYXRlIHNsb3RcbiAgICBmdW5jdGlvbiBpbnNlcnREYXRhKCkge1xuICAgICAgLy8gR2V0IHRoZSBjb250YWluZXIgdG8gYXZvaWQgcmVwZWF0ZWRseSBjYWxsaW5nIHF1ZXJ5U2VsZWN0b3Igb24gZG9jdW1lbnRcbiAgICAgIGNvbnN0IGluZm9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5mby1jb250YWluZXInKTtcbiAgXG4gICAgICAvLyBIZWFkZXIgcG9ydGlvblxuICAgICAgLy8gQnJpZWYgZGVzY3JpcHRpb24gb2YgdGhlIHdlYXRoZXIgKHN1bm55LCBjbG91ZHkgZWNjLilcbiAgICAgIGNvbnN0IHdlYXRoZXJEZXNjcmlwdGlvbiA9IGluZm9Db250YWluZXIucXVlcnlTZWxlY3RvcignLmdyaWQtdG9wIHAnKTtcbiAgICAgIHdlYXRoZXJEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHRoaXMuZGVzY3JpcHRpb247XG4gICAgICAvLyBDaXR5IGFuZCBjb3VudHJ5IG5hbWUgZm9yIGxvbmdcbiAgICAgIGNvbnN0IGNpdHlBbmRDb3VudHJ5TmFtZSA9IGluZm9Db250YWluZXIucXVlcnlTZWxlY3RvcignLmdyaWQtdG9wIGgxJyk7XG4gICAgICBjaXR5QW5kQ291bnRyeU5hbWUudGV4dENvbnRlbnQgPSBgJHt0aGlzLmNpdHl9LCAke3RoaXMuY291bnRyeX1gO1xuICBcbiAgICAgIC8vIEJvdHRvbS1sZWZ0IHBvcnRpb25cbiAgICAgIGNvbnN0IHRlbXBlcmF0dXJlQ29udGFpbmVyID0gaW5mb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudGVtcGVyYXR1cmUnKTtcbiAgICAgIHRlbXBlcmF0dXJlQ29udGFpbmVyLnRleHRDb250ZW50ID0gdGhpcy50ZW1wZXJhdHVyZTtcbiAgXG4gICAgICAvLyBCb3R0b20tcmlnaHQgcG9ydGlvblxuICAgICAgY29uc3QgYWxsU2lkZUluZm9QYXJhZ3JhcGhzID0gQXJyYXkuZnJvbShcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpZGUtaW5mbycpXG4gICAgICApO1xuICAgICAgYWxsU2lkZUluZm9QYXJhZ3JhcGhzWzBdLnRleHRDb250ZW50ID1cbiAgICAgICAgJ0ZlZWxzIGxpa2U6ICcgKyB0aGlzLnRlbXBmZWVsc2xpa2UgKyAnwrAnO1xuICAgICAgYWxsU2lkZUluZm9QYXJhZ3JhcGhzWzFdLnRleHRDb250ZW50ID0gJ1dpbmQ6ICcgKyB0aGlzLndpbmRzcGVlZCArICdrbS9oJztcbiAgICAgIGFsbFNpZGVJbmZvUGFyYWdyYXBoc1syXS50ZXh0Q29udGVudCA9ICdIdW1pZGl0eTogJyArIHRoaXMuaHVtaWRpdHkgKyAnJSc7XG4gICAgfVxuXG4gICAgLy8gQXBwZW5kcyBhbiBlcnJvciBkaXYgd2l0aCBhIG1lc3NhZ2UgdW5kZXIgdGhlIHNlYXJjaCBiYXJcbiAgICBmdW5jdGlvbiBjcmVhdGVFcnJvckRpdihtZXNzYWdlKSB7XG4gICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlcnJvckRpdi5jbGFzc0xpc3QuYWRkKFwiZXJyb3JcIiwgXCJ2aXNpYmxlXCIpO1xuICAgICAgZXJyb3JEaXYudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgICAgZG9jdW1lbnRcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyXCIpXG4gICAgICAgIC5pbnNlcnRCZWZvcmUoZXJyb3JEaXYsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIikpO1xuICAgIH1cbiAgXG4gICAgLy8gRGVsZXRlcyB0aGUgZXJyb3IgZGl2XG4gICAgZnVuY3Rpb24gZGVsZXRlRXJyb3JEaXYoKSB7XG4gICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXJyb3JcIik7XG4gICAgICBpZiAoZXJyb3JEaXYpIGVycm9yRGl2LnJlbW92ZSgpO1xuICAgIH1cbiAgXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgXG4gICAgcmV0dXJuIHsgZ2V0VXNlclF1ZXJ5LCBpbnNlcnREYXRhLCBjcmVhdGVFcnJvckRpdiwgZGVsZXRlRXJyb3JEaXYgfTtcbiAgfSkoKTtcblxuY29uc3QgV2VhdGhlckFwaUludGVyYWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gVXNlIHRoaXMgdG8gZ2l2ZSBtZXRob2RzIHRvIGEgd2VhdGhlciBvYmplY3RcbiAgY29uc3Qgd2VhdGhlck1ldGhvZHMgPSB7XG4gICAgaW5zZXJ0RGF0YTogZG9tRWxlbWVudHMuaW5zZXJ0RGF0YSxcbiAgfTtcblxuICBhc3luYyBmdW5jdGlvbiBmZXRjaEFwaURhdGEodXNlclF1ZXJ5KSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEJhc2UgVVJMIGZvciB0aGUgcXVlcnlcbiAgICAgIC8vIFNwZWNpZmllZCB1bml0cz1tZXRyaWMgYmVjYXVzZSBJIGNhbiB1bmRlcnN0YW5kIHRob3NlXG4gICAgICAvLyBJIHBsb3AgaW4gbXkgdXNlcidzIHF1ZXJ5IHRvIG1ha2UgdGhlIHNlYXJjaCBkeW5hbWljXG4gICAgICBjb25zdCBhcGlRdWVyeVVybCA9IGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7dXNlclF1ZXJ5fSZBUFBJRD00ODFkYWI5NzhhMjBhNDI5OThhNjMxZWZmN2Q0ZjhmNCZ1bml0cz1tZXRyaWNgO1xuIFxuICAgICAgLy8gVXNpbmcgdGhlIGZldGNoIG1ldGhvZCB3ZSBxdWVyeSB0aGUgc2VydmVyLCBhbmQgd2UgZ2V0IGJhY2sgYSByZXNwb25zZSBvYmplY3QuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVF1ZXJ5VXJsLCB7IG1vZGU6IFwiY29yc1wiIH0pO1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IHRoZSBpbmZvcm1hdGlvbiB3ZSBuZWVkLCBhbmQgZm9yIHRoYXQgd2UgY2FsbCB0aGUgLmpzb24gbWV0aG9kLlxuICAgICAgY29uc3Qgd2VhdGhlckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAvLyBDaGVjayBmb3IgZXJyb3JzXG4gICAgICBpZiAod2VhdGhlckRhdGEuY29kID09PSBcIjQwNFwiKSB7XG4gICAgICAgIHRocm93IHdlYXRoZXJEYXRhO1xuICAgICAgfVxuICAgICAgLy8gUmV0dXJuIHRoZSBkYXRhIGF0IGxhc3RcbiAgICAgIHJldHVybiB3ZWF0aGVyRGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgYW55dGhpbmcgaXMgd3JvbmcsIGtub2NrIHVwc3RhaXJzLlxuICAgICAgcmV0dXJuIHsgaXNFcnJvcjogdHJ1ZSwgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoaXMgdGFrZXMgdGhlIEpTT04gZGF0YSByZXR1cm5lZCBieSB0aGUgQVBJXG4gIC8vIGFuZCBleHRyYWN0cyBvbmx5IHRoZSB0aGluZ3Mgd2Ugd2lsbCBkaXNwbGF5XG4gIC8vIFRlY2huaWNhbGx5IHVubmVjZXNzYXJ5LCBidXQgaW1wcm92ZWQgcmVhZGliaWxpdHlcbiAgZnVuY3Rpb24gZXh0cmFjdFJlbGV2YW50RGF0YSh3ZWF0aGVyT2JqZWN0KSB7XG4gICAgLy8gT2JqZWN0IGxpdGVyYWwgZGVjbGFyYXRpb25cbiAgICBjb25zdCB3ZWF0aGVyID0gT2JqZWN0LmNyZWF0ZSh3ZWF0aGVyTWV0aG9kcyk7XG5cbiAgICAvLyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgd2VhdGhlciBpdHNlbGZcbiAgICB3ZWF0aGVyLnRlbXBlcmF0dXJlID0gTnVtYmVyKHdlYXRoZXJPYmplY3QubWFpbi50ZW1wKS50b0ZpeGVkKDApO1xuICAgIHdlYXRoZXIudGVtcGZlZWxzbGlrZSA9IE51bWJlcih3ZWF0aGVyT2JqZWN0Lm1haW4uZmVlbHNfbGlrZSkudG9GaXhlZCgwKTtcbiAgICB3ZWF0aGVyLmh1bWlkaXR5ID0gd2VhdGhlck9iamVjdC5tYWluLmh1bWlkaXR5O1xuICAgIHdlYXRoZXIud2luZHNwZWVkID0gTnVtYmVyKHdlYXRoZXJPYmplY3Qud2luZC5zcGVlZCkudG9GaXhlZCgxKTtcblxuICAgIC8vIEEgd29yZHkgZGVzY3JpcHRpb24gb2YgaG93IHRoZSBza3kgaXMgbGlrZVxuICAgIC8vIFRoaXMgY29kZSByZXR1cm5zIGEgY2FwaXRhbGl6ZWQgZGVzY3JpcHRpb24gcHJvcGVydHlcbiAgICAvLyBCeSBkZWZhdWx0IGl0IGlzIGFsbCBsb3dlcmNhc2VcbiAgICB3ZWF0aGVyLmRlc2NyaXB0aW9uID1cbiAgICAgIHdlYXRoZXJPYmplY3Qud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgwLCAxKS50b1VwcGVyQ2FzZSgpICtcbiAgICAgIHdlYXRoZXJPYmplY3Qud2VhdGhlclswXS5kZXNjcmlwdGlvbi5zbGljZSgxKTtcblxuICAgIC8vIENvdW50cnkncyBuYW1lIGFuZCBjaXR5J3MgbmFtZTtcbiAgICB3ZWF0aGVyLmNpdHkgPSB3ZWF0aGVyT2JqZWN0Lm5hbWU7XG4gICAgY29uc3QgcmVnaW9uTmFtZXNDb252ZXJ0ZXIgPSBuZXcgSW50bC5EaXNwbGF5TmFtZXMoWydlbiddLCB7XG4gICAgICB0eXBlOiAncmVnaW9uJyxcbiAgICB9KTtcbiAgICB3ZWF0aGVyLmNvdW50cnkgPSByZWdpb25OYW1lc0NvbnZlcnRlci5vZih3ZWF0aGVyT2JqZWN0LnN5cy5jb3VudHJ5KTtcblxuICAgIC8vIENoZWNrIHRoZSByZXN1bHRcbiAgICBjb25zb2xlLmxvZyh3ZWF0aGVyKTtcbiAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdFxuICAgIHJldHVybiB3ZWF0aGVyO1xuICB9XG5cbiAgcmV0dXJuIHsgZXh0cmFjdFJlbGV2YW50RGF0YSwgZmV0Y2hBcGlEYXRhIH07XG59KSgpO1xuXG5jb25zdCBhcHBsaWNhdGlvbkZsb3cgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBUaGlzIGFzeW5jIGZ1bmN0aW9uIGFsbG93cyBtZSBvcmdhbml6ZSBjb2RlIGluIGEgd2F5XG4gIC8vIHRoYXQgbWFrZXMgaXQgc2VlbSBzeW5jaHJvbm91cywgc28gZXhlY3V0aW5nIHRvcCB0byBib3R0b20uXG4gIC8vIFdlIGNhbm5vdCBjYWxsIG91ciBzZWNvbmQgZnVuY3Rpb24gYmVmb3JlIHRoZSBmaXJzdFxuICAvLyBwcm9taXNlIHJlc29sdmVzOiBsdWNraWx5IGFzeW5jIGZ1bmN0aW9ucyBjYW4gaGVscCB1c1xuICAvLyBzb2x2ZSB0aGF0IHByb2JsZW0gaW4gYW4gZWxlZ2FudCBhbmQgcmVhZGFibGUgd2F5LlxuICAgIGFzeW5jIGZ1bmN0aW9uIGdldFdlYXRoZXJJbmZvKCkge1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIGRpdiwgZGVsZXRlIGl0XG4gICAgZG9tRWxlbWVudHMuZGVsZXRlRXJyb3JEaXYoKTtcbiBcbiAgICB0cnkge1xuICAgICAgLy8gU3RvcmVzIHdoYXQgaXMgaW4gdGhlIHNlYXJjaCBiYXJcbiAgICAgIGNvbnN0IHVzZXJJbnB1dCA9IGRvbUVsZW1lbnRzLmdldFVzZXJRdWVyeSgpO1xuICAgICAgLy8gV2UgZ2V0IGEgcHJvbWlzZSBmcm9tIGZldGNoQXBpRGF0YSwgd2FpdCB1bnRpbCBpdCdzIHJlc29sdmVkXG4gICAgICBjb25zdCBhcGlEYXRhID0gYXdhaXQgV2VhdGhlckFwaUludGVyYWN0aW9uLmZldGNoQXBpRGF0YSh1c2VySW5wdXQpO1xuICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgbWlzdGFrZSwgdGhlIGFwaURhdGEgb2JqZWN0IHdpbGxcbiAgICAgIC8vIGhhdmUgYW4gaXNFcnJvciBwcm9wZXJ0eSB3aXRoIGEgdmFsdWUgb2YgdHJ1ZVxuICAgICAgaWYgKGFwaURhdGEuaXNFcnJvcikgdGhyb3cgbmV3IEVycm9yKGFwaURhdGEubWVzc2FnZSk7XG4gXG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBtaXN0YWtlIHJldHVybiB0aGUgb2JqZWN0IHdpdGggY29uZGVuc2VkIGluZm9cbiAgICAgIGxldCBlbGFib3JhdGVkRGF0YSA9IFdlYXRoZXJBcGlJbnRlcmFjdGlvbi5leHRyYWN0UmVsZXZhbnREYXRhKGFwaURhdGEpO1xuICAgICAgLy8gRGlzcGxheSBpdCBmb3Igbm93XG4gICAgICBlbGFib3JhdGVkRGF0YS5pbnNlcnREYXRhKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGRvbUVsZW1lbnRzLmNyZWF0ZUVycm9yRGl2KGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGdldFdlYXRoZXJJbmZvIH07XG59KSgpO1xuXG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiZG9tRWxlbWVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwiYXBwbGljYXRpb25GbG93IiwiZ2V0V2VhdGhlckluZm8iLCJnZXRVc2VyUXVlcnkiLCJ2YWx1ZSIsImluc2VydERhdGEiLCJpbmZvQ29udGFpbmVyIiwidGV4dENvbnRlbnQiLCJkZXNjcmlwdGlvbiIsImNpdHkiLCJjb3VudHJ5IiwidGVtcGVyYXR1cmUiLCJhbGxTaWRlSW5mb1BhcmFncmFwaHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwidGVtcGZlZWxzbGlrZSIsIndpbmRzcGVlZCIsImh1bWlkaXR5IiwiY3JlYXRlRXJyb3JEaXYiLCJtZXNzYWdlIiwiZXJyb3JEaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbnNlcnRCZWZvcmUiLCJkZWxldGVFcnJvckRpdiIsIldlYXRoZXJBcGlJbnRlcmFjdGlvbiIsIndlYXRoZXJNZXRob2RzIiwiZXh0cmFjdFJlbGV2YW50RGF0YSIsIndlYXRoZXJPYmplY3QiLCJ3ZWF0aGVyIiwiY3JlYXRlIiwiTnVtYmVyIiwibWFpbiIsInRlbXAiLCJ0b0ZpeGVkIiwiZmVlbHNfbGlrZSIsIndpbmQiLCJzcGVlZCIsInRvVXBwZXJDYXNlIiwibmFtZSIsInJlZ2lvbk5hbWVzQ29udmVydGVyIiwiSW50bCIsIkRpc3BsYXlOYW1lcyIsInR5cGUiLCJvZiIsInN5cyIsImNvbnNvbGUiLCJsb2ciLCJmZXRjaEFwaURhdGEiLCJhc3luYyIsInVzZXJRdWVyeSIsImFwaVF1ZXJ5VXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1vZGUiLCJ3ZWF0aGVyRGF0YSIsImpzb24iLCJjb2QiLCJlcnJvciIsImlzRXJyb3IiLCJ1c2VySW5wdXQiLCJhcGlEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==